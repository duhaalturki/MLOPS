# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s_pDTchMPesQrcMscT7RTwB1rXqbfNFh
"""



import os
os.environ["MISTRAL_API_KEY"] = "NXyKdE5JFehmTjXn1RtYyVBOlMzPLGyB"
print(f"MISTRAL_API_KEY: {os.environ.get('MISTRAL_API_KEY')}")

api_key = os.getenv("MISTRAL_API_KEY")

import requests
from bs4 import BeautifulSoup
import re
response = requests.get(
"https://www.udst.edu.qa/about-udst/institutional-excellence-ie/policies-and-procedures/student-conduct-policy"
)
html_doc = response.text
soup = BeautifulSoup(html_doc, "html.parser")
tag = soup.find("div")
text = tag.text
print(text)

file_name = "Text.txt"
with open(file_name, 'w') as file:
  file.write(text)

file_name = "Text.txt"
with open(file_name, 'w') as file:
  file.write(text)

chunk_size = 512
chunks = [text[i : i + chunk_size] for i in range(0, len(text), chunk_size)]

len(chunks)

import os
from mistralai import Mistral
def get_text_embedding(list_txt_chunks):
  client = Mistral(api_key=api_key)
  embeddings_batch_response = client.embeddings.create(model="mistral-embed",
  inputs=list_txt_chunks)
  return embeddings_batch_response.data

import numpy as np
text_embeddings = get_text_embedding(chunks)

len(text_embeddings)

len(text_embeddings[0].embedding)

embeddings = np.array([text_embeddings[i].embedding for i in range(len(text_embeddings))])

import faiss
d = len(text_embeddings[0].embedding)
index = faiss.IndexFlatL2(d)
index.add(embeddings)

import requests
from bs4 import BeautifulSoup

# URL of the UDST policies page
url = "https://www.udst.edu.qa/about-udst/institutional-excellence-ie/udst-policies-and-procedures"
response = requests.get(url)
soup = BeautifulSoup(response.text, 'html.parser')

# Extract policy titles from the page (modify selector based on HTML structure)
policies = []
for policy in soup.select(".some-class-for-policy-titles"):  # Replace with actual class or selector
    policies.append(policy.get_text())

# Print extracted policies
for policy in policies:
    print(policy)


import streamlit as st
from transformers import RagTokenizer, RagRetriever, RagSequenceForGeneration

# Define the policies dataset with name, code, version, and description
policies = [
    {"name": "Student Conduct Policy", "code": "Pl-ST-01", "version": "V2", "description": "The policy outlines expectations for student conduct."},
    {"name": "Student Conduct Procedure", "code": "PR-ST-01", "version": "V1", "description": "The procedure outlines how student conduct issues are handled."},
    {"name": "Academic Schedule Policy", "code": "Pl-ST-02", "version": "V1", "description": "The policy defines the academic schedule for students."},
    {"name": "Academic Scheduling Procedure", "code": "PR-ST-02", "version": "V1", "description": "Procedure for managing and scheduling academic terms."},
    {"name": "Student Attendance Policy", "code": "Pl-ST-03", "version": "V1", "description": "Policy outlining attendance requirements for students."},
    {"name": "Student Attendance Procedure", "code": "PR-ST-03", "version": "V2", "description": "The procedure outlines the expectations and steps for student attendance."},
    {"name": "Student Appeals Policy", "code": "Pl-ST-04", "version": "V1", "description": "Policy that governs the procedure for appealing academic and conduct decisions."},
    {"name": "Academic Standing Policy", "code": "Pl-ST-05", "version": "V4", "description": "Policy outlining the requirements for maintaining academic standing."},
    {"name": "Academic Standing Procedure", "code": "PR-ST-05", "version": "V1", "description": "Procedure for determining academic standing and consequences."},
    {"name": "Transfer Policy", "code": "Pl-ST-06", "version": "V1", "description": "Policy on transferring between academic programs or institutions."},
    {"name": "Admissions Policy", "code": "Pl-ST-07", "version": "V2", "description": "The policy defines the admission criteria and process for students."},
    {"name": "Admissions Procedure", "code": "PR-ST-07", "version": "V1", "description": "The procedure outlines the steps to be followed for admission."},
    {"name": "Final Grade Policy", "code": "Pl-ST-08", "version": "V2", "description": "The policy on assigning and submitting final grades for students."},
    {"name": "Final Grade Procedure", "code": "PR-ST-08", "version": "V2", "description": "The procedure to manage final grade submissions and disputes."},
    {"name": "Registration Policy", "code": "Pl-ST-09", "version": "V2", "description": "The policy governing student course registration and scheduling."},
    {"name": "Registration Procedure", "code": "PR-ST-09", "version": "V1", "description": "Procedure for registering courses and handling registration issues."},
    {"name": "Sport and Wellness Facilities and Services Usage Policy", "code": "Pl-ST-10", "version": "V1", "description": "The policy for using the sports and wellness facilities at UDST."},
    {"name": "Student Engagement Policy", "code": "Pl-ST-12", "version": "V1", "description": "Policy on student engagement and participation in university activities."},
    {"name": "Student Council Procedure", "code": "PR-ST-12-02", "version": "V1", "description": "Procedure for forming and electing the student council."},
    {"name": "International Student Policy", "code": "Pl-ST-13", "version": "V1", "description": "Policy that governs international students' rights and responsibilities."},
    {"name": "International Student Procedure", "code": "PR-ST-13", "version": "V1", "description": "Procedure outlining how international students should follow the university's requirements."},
    {"name": "Graduation Policy", "code": "Pl-ST-14", "version": "V1", "description": "The policy for graduation requirements, including academic and administrative steps."},
    {"name": "Student Counselling Services Policy", "code": "Pl-ST-16", "version": "V1", "description": "Policy describing the student counselling services provided by the university."},
    {"name": "Graduate Admissions Policy", "code": "Pl-ST-17", "version": "V1", "description": "The policy governing the admission of graduate students to the university."},
    {"name": "Graduate Academic Standing Policy", "code": "Pl-ST-18", "version": "V2", "description": "Policy for maintaining academic standing for graduate students."},
    {"name": "Graduate Academic Standing Procedure", "code": "PR-ST-18", "version": "V1", "description": "Procedure for evaluating and maintaining graduate academic standing."},
    {"name": "Graduate Final Grade Policy", "code": "Pl-ST-19", "version": "V1", "description": "Policy governing the assignment and review of final grades for graduate students."},
    {"name": "Graduate Final Grade Procedure", "code": "PR-ST-19", "version": "V1", "description": "Procedure for managing and disputing graduate final grades."},
    {"name": "Use of Library Space Policy", "code": "Pl-ST-22", "version": "V1", "description": "Policy governing the usage of library space and facilities."},
    {"name": "Digital Media Centre Booking Procedure", "code": "PR-ST-22-01", "version": "V1", "description": "Procedure for booking the Digital Media Centre at the university."},
    {"name": "Library Study Room Booking Procedure", "code": "PR-ST-22-02", "version": "V1", "description": "Procedure for booking study rooms in the library."},
    {"name": "Right Refuse Service Procedure", "code": "PR-ST-22-03", "version": "V1", "description": "Procedure for refusing services based on university policy."},
    {"name": "Scholarship and Financial Assistance Policy", "code": "PL-ST-11", "version": "V1", "description": "Policy outlining the scholarships and financial assistance available to students."}
]

# Load pre-trained RAG model
tokenizer = RagTokenizer.from_pretrained('facebook/rag-sequence-nq')
retriever = RagRetriever.from_pretrained('facebook/rag-sequence-nq', index_name="compressed")
model = RagSequenceForGeneration.from_pretrained('facebook/rag-sequence-nq', retriever=retriever)

# Streamlit layout
st.title('UDST Policy Chatbot')

# Policy selection
policy_names = [policy['name'] for policy in policies]
selected_policy = st.selectbox("Select a Policy", policy_names)

# Get the description for the selected policy
selected_policy_desc = next(policy['description'] for policy in policies if policy['name'] == selected_policy)

# Display policy description
st.write(f"### {selected_policy}")
st.write(f"**Description:** {selected_policy_desc}")

# Text input for query
query = st.text_input("Ask a question about the policy:")

if query:
    # Tokenize input
    inputs = tokenizer(query, return_tensors="pt")
    generated = model.generate(**inputs)
    answer = tokenizer.decode(generated[0], skip_special_tokens=True)

    # Show the generated answer
    st.text_area("Answer:", value=answer, height=200)

